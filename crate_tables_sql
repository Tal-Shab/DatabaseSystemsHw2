CREATE TABLE IF NOT EXISTS Actors(actor_id INTEGER PRIMARY KEY CHECK (actor_id>0),
            actor_name TEXT NOT NULL,
            age INTEGER NOT NULL CHECK (age>0),
            height INTEGER NOT NULL CHECK (height>0)
            );
CREATE TABLE IF NOT EXISTS Movies(movie_name TEXT NOT NULL,
            year INTEGER NOT NULL CHECK(year>=1895),
            genre TEXT NOT NULL CHECK(genre in ('Drama','Action','Comedy','Horror')),
            PRIMARY KEY(movie_name,year)
            );
CREATE TABLE IF NOT EXISTS Studios(studio_id INTEGER PRIMARY KEY CHECK (studio_id>0),
            studio_name TEXT NOT NULL
            );
CREATE TABLE IF NOT EXISTS Critics(critic_id INTEGER PRIMARY KEY CHECK (critic_id>0),
            critic_name TEXT NOT NULL
            );
CREATE TABLE IF NOT EXISTS PlayedIn(actor_id INTEGER NOT NULL,
            movie_name TEXT NOT NULL,
            year INTEGER NOT NULL,
            salary INTEGER NOT NULL CHECK (salary>0),
            num_roles INTEGER NOT NULL CHECK (num_roles>0),
            PRIMARY KEY (actor_id,movie_name,year),
            FOREIGN KEY (movie_name,year) REFERENCES Movies ON DELETE CASCADE,
            FOREIGN KEY (actor_id) REFERENCES Actors ON DELETE CASCADE
            );
CREATE TABLE IF NOT EXISTS PlayedInRole(actor_id INTEGER NOT NULL,
            movie_name TEXT NOT NULL,
            year INTEGER NOT NULL,
            actor_role TEXT NOT NULL,
            PRIMARY KEY (actor_id,movie_name,year,actor_role),
            FOREIGN KEY (actor_id,movie_name,year) REFERENCES PlayedIn ON DELETE CASCADE
            );
CREATE TABLE IF NOT EXISTS Produced(movie_name TEXT NOT NULL,
            year INTEGER NOT NULL,
            studio_id INTEGER NOT NULL,
            budget INTEGER NOT NULL CHECK(budget>=0),
            revenue INTEGER NOT NULL CHECK(revenue>=0),
            PRIMARY KEY(movie_name,year),
            FOREIGN KEY(movie_name,year) REFERENCES Movies ON DELETE CASCADE,
            FOREIGN KEY(studio_id) REFERENCES Studios ON DELETE CASCADE
            );
CREATE TABLE IF NOT EXISTS Rated(movie_name TEXT NOT NULL,
            year INTEGER NOT NULL,
            critic_id INTEGER NOT NULL,
            rating INTEGER NOT NULL CHECK(rating>=1 AND rating<=5),
            PRIMARY KEY(movie_name,year,critic_id),
            FOREIGN KEY(movie_name,year) REFERENCES Movies ON DELETE CASCADE,
            FOREIGN KEY(critic_id) REFERENCES Critics ON DELETE CASCADE
            );
CREATE VIEW movie_AVG_rating AS
            SELECT movie_name,year,AVG(rating) average
            FROM Rated
            GROUP BY movie_name,year;
CREATE VIEW actor_movie_AVG_rating AS
            SELECT DISTINCT actor_id, p.movie_name, p.year, COALESCE(average,0) as average
            FROM PlayedIn p LEFT JOIN movie_AVG_rating r ON p.movie_name=r.movie_name and p.year=r.year;
CREATE VIEW actor_movie_studio AS
            SELECT Distinct actor_id, pl.movie_name, pl.year, pr.studio_id
            from playedin pl JOIN produced pr On pl.movie_name=pr.movie_name AND pl.year=pr.year;
